import {
    createSlice,
    createEntityAdapter,
    createAsyncThunk,
  } from '@reduxjs/toolkit'
 import {fetchAlbumApi, deleteAlbumApi, createAlbumApi, updateAlbumAPi } from './api/albumApi';


  export const fetchAlbums = createAsyncThunk(
    'albums/fetchAlbums',
    async () => {
      const {data: {listAlbums}} = await fetchAlbumApi()
      const items = listAlbums.items
    //   console.log(data);
      return {items}
    }
  )
  
  export const deleteAlbum = createAsyncThunk(
    'albums/deleteAlbum',
    async (id) => {
      const data = await deleteAlbumApi(id);
      return id;
    }
  )

  export const createAlbum = createAsyncThunk(
      'albums/createAlbum',
      async (myData) => {
          const result = await createAlbumApi(myData);
        return result.data.createAlbum;
      }
  )

  export const updateAlbum = createAsyncThunk(
      'albums/updateALbum',
      async (myData) => {
          const result = await updateAlbumAPi(myData);
          console.log(result);
          return result.data.updateAlbum;
      }
  );

  const albumsAdapter = createEntityAdapter({
    selectId: (items) => items.id,
  })
  export const albumsSelectors = albumsAdapter.getSelectors(
    (state) => state.albums
  )
 
  export const albumSlice = createSlice({
    name: 'counter',
    initialState: albumsAdapter.getInitialState({
        loading: false,
      }),
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setAllAlbums: albumsAdapter.setAll,
        deleteAlbum: albumsAdapter.removeOne,
        updateAlbum: albumsAdapter.updateOne,

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers:  {
        [fetchAlbums.pending](state) {
            state.loading = true
          },
        [fetchAlbums.fulfilled](state, { payload }) {
         state.loading = false
         albumsAdapter.setAll(state, payload.items)
        },
        [deleteAlbum.pending](state) {
            state.loading = true
        },
        [deleteAlbum.fulfilled](state, {payload}) {
            state.loading = false
            albumsAdapter.removeOne(state, payload);
        },
        [createAlbum.pending](state) {
            state.loading = true
        },
        [createAlbum.fulfilled](state, {payload}) {
            state.loading = false
            console.log(payload);
            albumsAdapter.addOne(state, payload);
        },
        [updateAlbum.pending](state) {
            state.loading = true
        },
        [updateAlbum.fulfilled](state, {payload}) {
            state.loading = false
            console.log(payload);
            albumsAdapter.updateOne(state, {
                id: payload.id,
                changes: payload,
            })
            
        }
    },
  });


  export const {
    setAllAlbums
  } = albumSlice.actions
  
  export default albumSlice.reducer