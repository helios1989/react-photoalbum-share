import {
    createSlice,
    createEntityAdapter,
    createAsyncThunk,
  } from '@reduxjs/toolkit'
 import {createPhotoApi, deletePhotoApi, fetchPhotoApi} from './api/photosApi';


  export const fetchPhotos = createAsyncThunk(
    'albums/fetchPhotos',
    async () => {
      const {data: {listPhotos}} = await fetchPhotoApi()
      const {items} = listPhotos;
      return {items};
    }
  )

  export const deletePhotos = createAsyncThunk(
      'albums/deletePhotos',
      async (id) => {
        const result = await deletePhotoApi(id);
        return id;
      }
  )

  export const createPhotos = createAsyncThunk(
    'albums/addPhotos',
    async (myData) => {
      const result = await createPhotoApi(myData);
      const createPhotoResult = result.data.createPhoto;
      return createPhotoResult;
    }
  )

  const photoAdapter = createEntityAdapter({
    selectId: (items) => items.id,
  })
  export const photoSelector = photoAdapter.getSelectors(
    (state) => state.photos
  )

  export const photoSlice = createSlice({
    name: 'counter',
    initialState: photoAdapter.getInitialState({
        loading: false,
    }),
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setAllPhotos: photoAdapter.setAll,
        removePhotos: photoAdapter.removeOne,
        createPhotos: photoAdapter.addOne
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers:  {
        [fetchPhotos.pending](state) {
            state.loading = true
          },
        [fetchPhotos.fulfilled](state, { payload }) {
         state.loading = false
         photoAdapter.setAll(state, payload.items)
        },
        [deletePhotos.pending](state) {
            state.loading = true
        },
        [deletePhotos.fulfilled](state, {payload}) {
            state.loading = false;
            photoAdapter.removeOne(state,payload);
        },
        [createPhotos.pending](state) {
            state.loading = true
        },
        [createPhotos.fulfilled](state, payload) {
            state.loading = false;
            console.log(payload);
            photoAdapter.addOne(state,payload);
        }
    },
  });


  export const {
    setAllPhotos
  } = photoSlice.actions
  
  export default photoSlice.reducer